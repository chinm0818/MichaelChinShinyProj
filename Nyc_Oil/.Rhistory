?ordered
num = 5
if (num %% 2 != 0) {
cat(num, 'is odd')
}
num = 5
if (num %% 2 != 0) {
print (num, 'is odd')
}
num = 5
if (num %% 2 != 0) {
print(num, 'is odd')
}
num = 5
if (num %% 2 != 0) {
cat(num, 'is odd')
}
?cat
cat(what i do is cool)
cat(num 'whatever')
cat(num, 'whatever')
cat(whatever, i, do)
print(num, 'whatever')
age_type = 'middle'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70]))
age_type = 'middle'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70])
age = sample(0:100, 20, replace = TRUE)
age_type = 'middle'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70])
age_type = 'old'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70])
age_type = 'young'
switch(age_type,
young = age[age <= 30],
middle = age[age <= 70 & age > 30],
old = age[age > 70])
?switch
?mapply
m = c(87, 58, 65, 100)
h = c(180, 165, 160, 193){
m = c(87, 58, 65, 100)
h = c(180, 165, 160, 193)
bmi = function(m,h){
m/(h/10)
}
mapply(bmi, m, h)
bmi = function(m, h)
m = c(87, 58, 65, 100)
h = c(180, 165, 160, 193)
bmi = function(m,h){
m/(h/10)
}
mapply(bmi, m, h)
tax = function(i){
if(i<5000){
return(i*.1)
} else
return(i*.2)
}
tax(2000)
tax(12300)
tax(1230)
Grade = c(75,93,88,99,75,76,92)
score = A
switch(score,
A = Grade[Grade > 90],
B = Grade[Grade <=90 & Grade > 70],
C = Grade[Grade < 70])
Grade = c(75,93,88,99,75,76,92)
score = 'A'
switch(score,
'A' = Grade[Grade > 90],
'B' = Grade[Grade <=90 & Grade > 70],
'C' = Grade[Grade < 70])
n = 1:15
P = 5000
r = .115
interest = function(n){
5000*(1+(11.5/100))^n
}
a = sapply(n, interest)
print(a)
tax2 = function(i){
ifelse(i < 5000, i * .1, i * .2)
}
tax2(60000)
tax2(600)
sign_data = read.csv('TimesSqareSignature.csv', header = TRUE)
for (x in sign_data$Width) {
if (is.na(x)){
cat("WARNING: Missing width\n")
}
}
prime.checker = function(x) {
if (x %in% c(2, 3, 5, 7)) return(TRUE)
if (x %% 2 == 0 | x == 1) return(FALSE)
xsqrt = round(sqrt(x))
xseq = seq(from = 3, to = xsqrt, by = 2)
return(all(x %% xseq != 0))
}
prime.checker(1e4)
system.time()
system.time(prime.checker(1e4))
system.time({
x1 = c()
for (i in 1:1e4) {
y = prime.checker(i)
x1[i] = y
}
})
system.time({
x2 = logical(1e4)
for (i in 1:1e4) {
y = prime.checker(i)
x2[i] = y
}
})
system.time({
x3 = sapply(1:1e4, prime.checker)
})
i = 2
x = c(1, 1)
while (x[i] < 1e3) {
x[i+1] = x[i-1] + x[i]
i = i + 1
}
x = x[-i]
print(x)
n2 = 1:100
for (i in n2) {
i**2
}
n2 = 1:100
for (i in n2) {
print(i**2)
}
v = c(2,3,4,5)
v2 = c()
for(i in v){
append(v2, i^2)
print(v2)
}
v = c(2,3,4,5)
v2 = c()
for(i in v){
v2 + i**2
}
print(v2)
v = c(2,3,4,5)
v2 = c()
for(i in v){
v2 = c(v2, i**2)
}
print(v2)
v = c(2,3,4,5)
v2 = c()
for(i in v){
v2 = c(v2, i**2)
}
print(sum(v2))
for(i in v){
vv = 1:i
for(x in vv){
vv2 = c()
vv2 = c(vv2, x^2)
}
print(vv2)
}
for(i in v){
vv = 1:i
for(x in vv){
vv2 = c()
vv2 = c(vv2, x^2)
}
cat(vv2)
}
for(i in v){
vv = 1:i
for(x in vv){
vv2 = c()
vv2 = c(vv2, x^2)
}
print(vv2)
}
for(i in v){
vv = 1:i
for(x in vv){
vv2 = c()
vv2 = c(vv2, x^2)
}
print(vv2)
}
for(i in v){
vv = 1:i
print(vv)
for(x in vv){
vv2 = c()
vv2 = c(vv2, x^2)
}
print(vv2)
}
for(i in v){
vv = 1:i
vv2 = c()
print(vv)
for(x in vv){
vv2 = c(vv2, x^2)
}
print(vv2)
}
for(i in v){
vv = 1:i
vv2 = c()
print(vv)
for(x in vv){
vv2 = c(vv2, x^2)
}
print(sum(vv2))
}
for(i in v){
vv = 1:i
vv2 = c()
print(vv)
for(x in vv){
vv2 = c(vv2, x^2)
}
cat(sum(vv2), '\n')
}
i = 1
while(i < 1000){
v3 = c()
v3 = c(v3, i**2)
i + 1
}
wf = 1:5e2
for(i in wf){
w = seq(i, 1, -1)/(sum(1:50000))
print(w)
}
wf = 1:5e2
for(i in wf){
w = seq(i, 1, -1)/(sum(1:i))
print(w)
}
for(i in wf){
w = seq(i, 1, -1)/(sum(1:i))
print(w)
}
sumx = 0
for(i in 1:50000)
{sumx = sumx + i * (50001 - i)}
sumx/sum(1:50000)
sumx = 0
for(i in 1:50000)
{sumx = sumx + i * (50001 - i)
print(sumx)}
data(cars)
print(head(cars))
data(cars)
print(head(cars,5))
cars[state = c('NY','CA')]
cars[cars[state == c('NY','CA')]]
cars
state = sample(1:3, length(cars), replace = TRUE)
state
?length
shape(cars)
dim(cars)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state
levels(state) = c("NY", "CA", "CT")
state
state = factor(state)
state
levels(state) = c('NY', 'CA', 'CT')
state
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
cars2
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
print(head(cars2), 5)
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(avg(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(mean(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
cars2 = cbind(cars, state)
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars2, ratio)
print(head(cars2))
print(head(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, c(state,ratio))
print(head(cars2))
print(head(cars2$ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = rbind(cars, c(state,ratio))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
print(ratio)
print(head(cars2))
print(head(cars2$ratio))
cars['dist']
cars['dist']/cars['speed']
ratio = cars['dist']/cars['speed']
ratio
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
print(head(cars2))
print(head(cars2$ratio))
ratio
cars2 = cbind(cars, ratio)
cars2
cars2 = cbind(cars2, state)
cars2
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars, ratio)
print(head(cars2))
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(car2) = c('dist','speed','state','ratio')
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(cars2) = c('dist','speed','state','ratio')
print(head(cars2))
data(cars)
print(head(cars,5))
set.seed(0)
state = sample(1:3, dim(cars[1]), replace = TRUE)
state = factor(state)
levels(state) = c('NY','CA','CT')
state
#print(head(cars2), 5)
ratio = cars['dist']/cars['speed']
cars2 = cbind(cars, state)
cars2 = cbind(cars2, ratio)
colnames(cars2) = c('dist','speed','state','ratio')
print(head(cars2))
print(mean(cars2['ratio']))
class(cars['ratio'])
class(cars2['ratio'])
mean(cars[2])
mean(float(cars[2]))
mean(as.float(cars[2]))
mean(as.numeric(cars[2]))
shiny::runApp('NYCDSA_proj/projects/Nyc_Oil')
runApp('NYCDSA_proj/projects/Nyc_Oil')
shiny::runApp('NYCDSA_proj/projects/Nyc_Oil')
runApp('MichaelChinShinyProj/Nyc_Oil')
shiny::runApp('MichaelChinShinyProj/Nyc_Oil')
setwd("~/MichaelChinShinyProj/Nyc_Oil")
counties = readOGR("nycbb.shp", layer = "nycbb")
names(counties)
head(counties)
head(counties[1,,])
head(counties[1,])
counties$boro_name
runApp()
